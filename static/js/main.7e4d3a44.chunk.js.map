{"version":3,"sources":["Images/Rose_v2.jpg","logo.svg","Navbar.js","Projects.js","CurrentProject.js","Blog.js","Footer.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","menuButton","marginRight","spacing","width","height","margin","title","flexGrow","appBar","boxShadow","buttonColor","color","paddingBottom","TheMenu","classes","AppBar","position","className","Toolbar","Avatar","edge","alt","src","roseImage","Typography","variant","Button","Projects","Component","CurrentProject","Blog","Footer","Contact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,qC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,uMCWrCC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,WAAY,CACVC,YAAaF,EAAMG,QAAQ,GAC3BC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IAEVC,MAAO,CACPC,SAAU,GAEVC,OAAQ,CACNC,UAAW,QAGbC,YAAa,CACXC,MAAO,UACPC,cAAe,OA+BJC,MA3Bd,WACC,IAAMC,EAAUjB,IAChB,OACE,6BACE,kBAACkB,EAAA,EAAD,CAAQC,SAAS,SAASL,MAAQ,UAAUM,UAAWH,EAAQN,QAC7D,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,IAAM,OAAOC,IAAOC,IAAWN,UAAWH,EAAQd,YACrE,kBAAC,IAAD,OAEF,kBAACwB,EAAA,EAAD,CAAYC,QAAQ,KAAKR,UAAWH,EAAQR,QAE5C,yBAAKW,UAAaH,EAAQJ,aAC1B,kBAACgB,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,qB,uCCrCKC,E,iLANP,OACI,yD,GAHWC,aCQRC,E,iLANP,OACI,yD,GAHiBD,aCQdE,E,iLANP,OACI,iD,GAHOF,aCQJG,E,iLANP,OACI,mD,GAHSH,aCQNI,E,iLANP,OACI,oD,GAHUJ,aCqBPK,MAbf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCNciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7e4d3a44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rose_v2.353780cf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport roseImage from './Images/Rose_v2.jpg'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    width: 100,\r\n    height: 100,\r\n    margin: 10\r\n  },\r\n  title: {\r\n  flexGrow: 1\r\n  },\r\n  appBar: {\r\n    boxShadow: 'none'\r\n    \r\n  },\r\n  buttonColor: {\r\n    color: '#a1887f',\r\n    paddingBottom: 50\r\n  }\r\n}));\r\n\r\n function TheMenu() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" color = 'inherit' className={classes.appBar}>\r\n        <Toolbar>\r\n          <Avatar edge=\"start\" alt = 'Rose' src = {roseImage} className={classes.menuButton} >\r\n            <MenuIcon />\r\n          </Avatar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n          </Typography>\r\n          <div className = {classes.buttonColor}>\r\n          <Button>About</Button>\r\n          <Button>Portfolio</Button>\r\n          <Button>Current Work</Button>\r\n          <Button>Blog</Button>\r\n          <Button>Contact</Button>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default TheMenu","import React, {Component} from 'react'\r\n\r\nclass Projects extends Component {\r\n    render() {\r\n        return (\r\n            <h1>The projects section.</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projects","import React, {Component} from 'react'\r\n\r\nclass CurrentProject extends Component {\r\n    render () {\r\n        return (\r\n            <h1>Current work section!</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CurrentProject","import React, {Component} from 'react'\r\n\r\nclass Blog extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Blog section!</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Blog","import React, {Component} from 'react'\r\n\r\nclass Footer extends Component {\r\n    render () {\r\n        return (\r\n            <h1>Footer section!</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, {Component} from 'react'\r\n\r\nclass Contact extends Component {\r\n    render () {\r\n        return (\r\n            <h1>Contact section!</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TheMenu from './Navbar'\nimport Projects from './Projects'\nimport CurrentProject from './CurrentProject'\nimport Blog from './Blog'\nimport Footer from './Footer'\nimport Contact from './Contact'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TheMenu />\n      <Projects />\n      <CurrentProject />\n      <Blog />\n      <Contact />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}